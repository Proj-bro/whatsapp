// @ts-nocheck
let contacts=[],sending=!1;function addManualRecord(){const e=document.getElementById("manualName").value,t=document.getElementById("manualMobile").value,a=document.getElementById("manualGroup").value,o=document.getElementById("globalText").value,n=document.getElementById("globalImage").value;e&&t&&o?(localStorage.setItem(`${t}_text`,o),localStorage.setItem(`${t}_image`,n),contacts.push({row:contacts.length+1,name:e,mobile:t,group:a,status:"created",createdAt:(new Date).toLocaleString(),updatedAt:"",text:o,image:n}),updateTable(),document.getElementById("manualForm").reset()):alert("Name, Mobile Number, and Text are required fields.")}function saveTextAndImage(){const e=document.getElementById("globalText").value,t=document.getElementById("globalImage").value;localStorage.setItem("global_text",e),localStorage.setItem("global_image",t),alert("Global Text and Image saved to local storage.")}function removeTextAndImage(){localStorage.removeItem("global_text"),localStorage.removeItem("global_image"),alert("Global Text and Image removed from local storage.")}function updateTable(){const e=document.getElementById("contactsTable").querySelector("tbody");e.innerHTML="",contacts.forEach(((t,a)=>{const o=t.response?t.response:"No response received";e.innerHTML+=`\n        <tr>\n            <td><input type="checkbox" data-index="${a}"></td>\n            <td>${t.row}</td>\n            <td>${t.name}</td>\n            <td>${t.mobile}</td>\n            <td>${t.status}</td>\n            <td>${t.createdAt}</td>\n            <td>${t.updatedAt}</td>\n            <td class="response">${o}</td>\n        </tr>\n        `}))}async function sendMessage(e,t){const a=localStorage.getItem(`${e.mobile}_text`)||localStorage.getItem("global_text"),o=localStorage.getItem(`${e.mobile}_image`)||localStorage.getItem("global_image"),n=encodeURIComponent(a.replace(/\n/g,"\n")),c=o?`http://api.textmebot.com/send.php?recipient=${e.mobile}&apikey=THtedubUj8zV&text=${n}&file=${encodeURIComponent(o)}`:`http://api.textmebot.com/send.php?recipient=${e.mobile}&apikey=THtedubUj8zV&text=${n}`;contacts[t].status="processing",updateTable();try{const e=await fetch(c),a=await e.text();contacts[t].response=a;const o=a.match(/Result:\s*<b>(.*?)<\/b>/);if(o){const e=o[1].trim();contacts[t].status="Success!"===e?"completed":"failed"}else contacts[t].status="failed"}catch(e){console.error("Error during API request:",e),contacts[t].response=`Error: ${e.message}`,contacts[t].status="failed"}finally{contacts[t].updatedAt=(new Date).toLocaleString(),updateTable()}}function sendSelected(){sendMessages(Array.from(document.querySelectorAll("input[type='checkbox']:checked")).map((e=>parseInt(e.dataset.index))))}async function sendAll(){await sendMessages(contacts.map(((e,t)=>t)))}async function sendMessages(e){if(!sending){sending=!0;for(let t of e)await sendMessage(contacts[t],t),await new Promise((e=>setTimeout(e,1e4)));sending=!1}}function downloadReport(){const e=[["Row","Name","Mobile Number","Status","Created Timestamp","Updated Timestamp"].join(","),...contacts.map((e=>[e.row,e.name,e.mobile,e.status,e.createdAt,e.updatedAt].join(",")))].join("\n"),t=new Blob([e],{type:"text/csv"}),a=document.createElement("a");a.href=URL.createObjectURL(t),a.download="report.csv",a.click()}document.getElementById("importContacts").addEventListener("change",(e=>{const t=e.target.files[0];if(t){const e=new FileReader;e.onload=()=>{e.result.split(/\r?\n/).slice(1).forEach((e=>{const t=e.split(",").map((e=>e.trim()));if(t.length>=3){const e=t[0]||"",a=t[1]||"",o=t[2]||"";contacts.push({row:contacts.length+1,name:e,mobile:a,group:o,status:"created",createdAt:(new Date).toLocaleString(),updatedAt:"",text:"",image:""})}})),updateTable()},e.readAsText(t)}}));